* Completions and Steroids

Most modern editors/IDEs help you by showing possible completions/actions based on your
current context or thing that you're doing. For example, when I want to open a file, I don't
want to have to remember all the files that I can choose from. I want the Emacs to show me what
files are available.

** General Emacs completion

The following packages will give completion on general emacs things:
buffers, files, help, etc. But other packages will also hook into this to
provide their own completions, like LSP mode.

*** The main completion engine

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    :config
    (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

*** More information on completions

#+begin_src emacs-lisp
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
          :map minibuffer-local-map
          ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode)
    )
#+end_src

*** Better ordering or completions

#+begin_src emacs-lisp
  (use-package orderless
    :config
    (setq completion-styles '(orderless basic)
          read-buffer-completion-ignore-case t
          completion-ignore-case t
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion))))
    )
#+end_src

** Search and navigations for completions

#+begin_src emacs-lisp
#+end_src

** Some steroids for the completions

#+begin_src emacs-lisp
  (use-package consult
    )

  (use-package embark
    :bind
    (
     ("C-h B" . embark-bindings)
     )
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    )

  (use-package embark-consult
    :after (embark consult)
    :demand t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode)
    )

  (use-package saveplace
    :config
    (setq-default save-place t)
    (setq save-place-file (expand-file-name ".places" user-emacs-directory)))
#+end_src

** Completions for keybindings

This package provides the possible remaining keybindings left
based on what you entered.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-setup-minibuffer)
    (which-key-mode))
#+end_src

** Better help documentation

#+begin_src emacs-lisp
  ;; (use-package helpful
  ;;   :bind
  ;;   ([remap describe-function] . helpful-function)
  ;;   ([remap describe-symbol] . helpful-symbol)
  ;;   ([remap describe-variable] . helpful-variable)
  ;;   ([remap describe-command] . helpful-command)
  ;;   ([remap describe-key] . helpful-key))
#+end_src


** Completions for text

Getting completions for text you are typing.

#+begin_src emacs-lisp
  ;; (use-package company
  ;;   :hook
  ;;   ((emacs-lisp-mode . (lambda ()
  ;;   		  (setq-local company-backends '(company-elisp))))
  ;;    (prog-mode . company-mode)
  ;;    (org-mode . company-mode)
  ;;    )
  ;;   :config
  ;;   (setq company-show-quick-access t
  ;;     company-idle-delay 0
  ;;     company-tooltip-limit 20
  ;;     company-tooltip-idle-delay 0.4
  ;;     company-show-numbers t
  ;;     company-dabbrev-downcase nil
  ;;     company-minimum-prefix-length 1
  ;;     company-selection-wrap-around t)
  ;;   (company-tng-configure-default)
  ;;   ;; Use the numbers 0-9 to select company completion candidates
  ;;   (let ((map company-active-map))
  ;;     (mapc (lambda (x) (define-key map (format "%d" x)
  ;;   		  `(lambda () (interactive) (company-complete-number ,x))))
  ;;       (number-sequence 0 9)))
  ;;   :bind
  ;;   (:map company-active-map
  ;;     ("C-j" . company-select-next)
  ;;     ("C-k" . company-select-previous)
  ;;     ("<tab>" . tab-indent-or-complete)
  ;;     ("TAB" . tab-indent-or-complete)
  ;;     )
  ;;   )
#+end_src
