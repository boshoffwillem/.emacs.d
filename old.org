#+TITLE: Emacs Config
#+AUTHOR: Willem Boshoff

* Software development

** Git Capabilities

Magit is an interface that gives you a lot of git functionality
and control over your repositories

#+begin_src emacs-lisp
  (use-package magit
    :defer
    )

  (use-package magit-todos)

  (use-package treemacs-magit
    :after treemacs)
#+end_src

Merge conflicts are real

#+begin_src emacs-lisp
  (use-package smerge-mode)

  (use-package ediff)
#+end_src

** LSP functionality

LSP provides intellisense, code actions, refactoring, etc.

#+begin_src emacs-lisp
  (defun wb/lsp-setup()
    (setq lsp-idle-delay 0.500
	  lsp-log-io nil
	  lsp-modeline-code-actions-segments '(count icon name)
	  lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols)
	  lsp-modeline-diagnostics-scope :workspace
	  lsp-auto-execute-action nil
	  lsp-diagnostic-clean-after-change t
	  lsp-headerline-breadcrumb-enable-symbol-numbers nil
	  lsp-lens-place-position 'above-line
	  lsp-semantic-tokens-honor-refresh-requests t
	  lsp-semantic-tokens-apply-modifiers nil
	  lsp-modeline-diagnostics-enable t
	  lsp-modeline-code-actions-enable t
	  lsp-breadcrumb-enable t
	  lsp-lens-enable t
	  lsp-semantic-tokens-enable t
	  lsp-dired-enable t)
    )

  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (wb/lsp-setup)
    (lsp-enable-which-key-integration t)
    :custom
    (setq lsp-eldoc-render-all t)
    (setq lsp-rust-analyzer-server-display-inlay-hints t)
    ;; vue
    (setq lsp-vetur-format-default-formatter-css "none"
	  lsp-vetur-format-default-formatter-html "none"
	  lsp-vetur-format-default-formatter-js "none"
	  lsp-vetur-validation-template nil)
    :hook
    (csharp-mode . lsp-deferred)
    (dockerfile-mode . lsp-deferred)
    (go-mode . lsp-deferred)
    (rustic-mode . lsp-deferred)
    (yaml-mode . lsp-deferred)
    (lsp-deferred-mode . lsp-modeline-diagnostics-mode)
    (lsp-deferred-mode . lsp-modeline-code-actions-mode)
    (lsp-deferred-mode . lsp-lens-mode)
    (lsp-deferred-mode . lsp-semantic-tokens-mode)
    (lsp-deferred-mode . lsp-dired-mode)
    (lsp-deferred-mode . lsp-enable-which-key-integration)
    (before-save . lsp-format-buffer)
    (before-save . lsp-organize-imports)
    :commands (lsp lsp-deferred)
    )
#+end_src

** UI layer

This provides some GUI functionality on top of LSP.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :init
    (setq lsp-ui-doc-enable t
	  lsp-ui-doc-position 'top
	  lsp-ui-doc-show-with-cursor t
	  lsp-ui-doc-show-with-mouse t
	  lsp-ui-sideline-enable nil
	  lsp-ui-sideline-show-code-actions t
	  lsp-ui-sideline-show-hover t
	  lsp-ui-sideline-show-diagnostics t)
    :commands (lsp-ui-mode)
    )
#+end_src

** Other LSP integrations

Lots of packages provides special/extended funtionality when LSP is available.

#+begin_src emacs-lisp
  ;; For Scala
  (use-package lsp-metals)
#+end_src
