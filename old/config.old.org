#+TITLE: Emacs Config
#+AUTHOR: Willem Boshoff

** Highlight color codes with colors

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :config
    (rainbow-mode)
    )
#+end_src

** Window Management

#+begin_src emacs-lisp
  ;; Easy window navigation
  (use-package winum
    :config
    (global-set-key (kbd "M-0") 'treemacs-select-window)
    (global-set-key (kbd "M-1") 'winum-select-window-1)
    (global-set-key (kbd "M-2") 'winum-select-window-2)
    (global-set-key (kbd "M-3") 'winum-select-window-3)
    (global-set-key (kbd "M-4") 'winum-select-window-4)
    (global-set-key (kbd "M-5") 'winum-select-window-5)
    (global-set-key (kbd "M-6") 'winum-select-window-6)
    (global-set-key (kbd "M-7") 'winum-select-window-7)
    (global-set-key (kbd "M-8") 'winum-select-window-8)
    (winum-mode)
    )
#+end_src

* Org Mode

#+begin_src emacs-lisp
  ;; TODO: Mode this to another section
  (setq-default fill-column 80)

  ;; Turn on indentation and auto-fill mode for Org files
  (defun wb/org-mode-setup ()
    (org-indent-mode 1)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    ;;(diminish org-indent-mode)
    )

  (use-package org
    :defer t
    :hook (org-mode . wb/org-mode-setup)
    :config
    (setq org-ellipsis " ..."
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'content
          org-cycle-separator-lines 2)

    (setq org-refile-
          targets '((nil :maxlevel . 1)
                    (org-agenda-files :maxlevel . 1)))

    (setq org-outline-pat
          h-complete-in-steps nil)
    (setq org-refile-use-outline-path t)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)
    ;; Replace list hyphen with dot
    ;; (font-lock-add-keywords 'org-mode
    ;;                         '(("^ *\\([-]\\) "
    ;;                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) ""))))))

    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'medium :height (cdr face)))

    ;; Make sure org-indent face is available
    (require 'org-indent)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil)
    )

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("* "** "*** "**** "***** "****** "*******"))
    )
#+end_src

* Text Manipulation

#+begin_src emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region)
    ("C--" . er/contract-region))

  (use-package multiple-cursors
    :bind (
           ("C-S-c s" . set-rectangular-region-anchor)
           ("C-S-c e" . #'mc/edit-lines)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)
           ))

  ;; Create shortcut for duplicating a line
  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    ;;(open-line 1)
    ;;(next-line 1)
    (previous-line 1)
    (yank))
  (global-set-key (kbd "C-S-d") 'duplicate-line)
#+end_src

* Software Engineering

** Containers and Orchestrators

#+begin_src emacs-lisp
  (use-package dockerfile-mode)

  (use-package docker-compose-mode)

  (use-package docker
    :bind
    ("C-c d" . docker)
    )
#+end_src

** Go Support

#+begin_src emacs-lisp
  (use-package go-mode
    :bind
    (:map go-mode-map
          ("<f6>" . gofmt)
          )
    :config
    (require 'lsp-go)
    ;; https://github.com/golang/tools/blob/master/gopls/doc/analyzers.md
    (setq lsp-go-analyses
          '((fieldalignment . t)
            (nilness . t)
            (unusedparams . t)
            )
          )
    ;; GOPATH/bin
    (add-to-list 'exec-path "$GOPATH/bin")
    (setq gofmt-command "goimports")
    )
#+end_src

** Markup Languages

#+begin_src emacs-lisp
  (use-package toml-mode)

  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (
           ("README$" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . markdown-mode)
           )
    :init (setq markdown-command "multimarkdown")
    )

  (use-package markdown-toc
    :after markdown-mode)

  (setq nxml-slash-auto-complete-flag t)
#+end_src

** .Net Support

#+begin_src emacs-lisp
  (use-package csproj-mode)

  (use-package dotnet
    :hook
    (csharp-mode . dotnet-mode)
    (fsharp-mode . dotnet-mode)
    )

  (use-package sln-mode
    :mode "\\.sln\\'")

  (use-package fsharp-mode
    :mode(
          ("\\.fs\\'" . fsharp-mode)
          )
    )

  (use-package sharper
    :bind
    ("C-c n" . sharper-main-transient))
#+end_src

** Scala Support

#+begin_src emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode)
    )

  ;; Enable sbt mode for executing sbt commands
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (setq sbt:program-options '("-Dsbt.supershell=false"))
    )
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rustic
    :bind
    (:map rustic-mode-map
          ("<f6>" . rustic-format-buffer)
          )
    :config
    (require 'lsp-rust)
    (setq rustic-format-on-save t)
    )
  (use-package flycheck-rust
    :after flycheck
    :hook
    (flycheck-mode . flycheck-rust-setup)
    )
#+end_src

** REST client

#+begin_src emacs-lisp
  (use-package restclient)

  (use-package company-restclient
    :config
    (add-to-list 'company-backends 'company-restclient)
    )
#+end_src
