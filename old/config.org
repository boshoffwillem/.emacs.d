** Give Me A Cool Startup Screen

#+begin_src emacs-lisp
  ;; Give me a cool start page
  (use-package dashboard
    :init
    (progn
      (setq dashboard-items '((recents . 5)
                              (projects . 5)
                              (bookmarks . 5)
                              (agenda . 5)))
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-heading-icons t)
      )
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Show Matching Parentheses
#+begin_src emacs-lisp
  ;; Highlight matching brackets.
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#8BE9FD")
    (show-paren-mode 1))

  ;; Make brackets pairs different colors.
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

** Highlight color codes with colors

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :config
    (rainbow-mode)
    )
#+end_src

** Window Management

#+begin_src emacs-lisp
  ;; Easy window navigation
  (use-package winum
    :config
    (global-set-key (kbd "M-0") 'treemacs-select-window)
    (global-set-key (kbd "M-1") 'winum-select-window-1)
    (global-set-key (kbd "M-2") 'winum-select-window-2)
    (global-set-key (kbd "M-3") 'winum-select-window-3)
    (global-set-key (kbd "M-4") 'winum-select-window-4)
    (global-set-key (kbd "M-5") 'winum-select-window-5)
    (global-set-key (kbd "M-6") 'winum-select-window-6)
    (global-set-key (kbd "M-7") 'winum-select-window-7)
    (global-set-key (kbd "M-8") 'winum-select-window-8)
    (winum-mode)
    )
#+end_src

* Text Manipulation

#+begin_src emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region)
    ("C--" . er/contract-region))

  (use-package multiple-cursors
    :bind (
           ("C-S-c s" . set-rectangular-region-anchor)
           ("C-S-c e" . #'mc/edit-lines)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)
           ))
#+end_src

* Searching

#+begin_src emacs-lisp
  (use-package ripgrep)

  (use-package rg)

  ;; ===================================== Project wide searching using ripgrep
  (use-package deadgrep)

  ;; ===================================== Search and replace with regular expressions
  (use-package visual-regexp)
#+end_src

* Software Engineering

** Code folding

#+begin_src emacs-lisp
  (use-package dash)

  (use-package s)

  (use-package origami
    :config
    (global-origami-mode)
    )
#+end_src

** Containers and Orchestrators

#+begin_src emacs-lisp
  (use-package dockerfile-mode)

  (use-package docker-compose-mode)

  (use-package docker
    :bind
    ("C-c d" . docker)
    )
#+end_src

** Go Support

#+begin_src emacs-lisp
  (use-package go-mode
    :bind
    (:map go-mode-map
          ("<f6>" . gofmt)
          )
    :config
    (require 'lsp-go)
    ;; https://github.com/golang/tools/blob/master/gopls/doc/analyzers.md
    (setq lsp-go-analyses
          '((fieldalignment . t)
            (nilness . t)
            (unusedparams . t)
            )
          )
    ;; GOPATH/bin
    (add-to-list 'exec-path "$GOPATH/bin")
    (setq gofmt-command "goimports")
    )
#+end_src

** Markup Languages

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode
    ("\\.yml\\'" . yaml-mode)
    ("\\.yaml\\'" . yaml-mode)
    )
  (use-package toml-mode)
#+end_src

** .Net Support

#+begin_src emacs-lisp
  (use-package csproj-mode)

  (use-package dotnet
    :hook
    (csharp-mode . dotnet-mode)
    (fsharp-mode . dotnet-mode)
    )

  (use-package sln-mode
    :mode "\\.sln\\'")

  (use-package fsharp-mode
    :mode(
          ("\\.fs\\'" . fsharp-mode)
          )
    )

  (use-package sharper
    :bind
    ("C-c n" . sharper-main-transient))
#+end_src

** Scala Support

#+begin_src emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode)
    )

  ;; Enable sbt mode for executing sbt commands
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (setq sbt:program-options '("-Dsbt.supershell=false"))
    )
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rustic
    :bind
    (:map rustic-mode-map
          ("<f6>" . rustic-format-buffer)
          )
    :config
    (require 'lsp-rust)
    (setq rustic-format-on-save t)
    )
  (use-package flycheck-rust
    :after flycheck
    :hook
    (flycheck-mode . flycheck-rust-setup)
    )
#+end_src


** REST client

#+begin_src emacs-lisp
  (use-package restclient)

  (use-package company-restclient
    :config
    (add-to-list 'company-backends 'company-restclient)
    )
#+end_src


* End File Documentation
#+begin_src emacs-lisp
  ;;; init.el ends here
#+end_src
